package com.ldrong.citydemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY".
*/
public class CityDao extends AbstractDao<City, Void> {

    public static final String TABLENAME = "CITY";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property COUNTY_CODE = new Property(0, String.class, "COUNTY_CODE", false, "COUNTY__CODE");
        public final static Property CITY_CODE = new Property(1, String.class, "CITY_CODE", false, "CITY__CODE");
        public final static Property COUNTY_NAME = new Property(2, String.class, "COUNTY_NAME", false, "COUNTY__NAME");
        public final static Property CITY_NAME = new Property(3, String.class, "CITY_NAME", false, "CITY__NAME");
        public final static Property PROVINCE_NAME = new Property(4, String.class, "PROVINCE_NAME", false, "PROVINCE__NAME");
        public final static Property PROVINCE_CODE = new Property(5, String.class, "PROVINCE_CODE", false, "PROVINCE__CODE");
    }


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY\" (" + //
                "\"COUNTY__CODE\" TEXT," + // 0: COUNTY_CODE
                "\"CITY__CODE\" TEXT," + // 1: CITY_CODE
                "\"COUNTY__NAME\" TEXT," + // 2: COUNTY_NAME
                "\"CITY__NAME\" TEXT," + // 3: CITY_NAME
                "\"PROVINCE__NAME\" TEXT," + // 4: PROVINCE_NAME
                "\"PROVINCE__CODE\" TEXT);"); // 5: PROVINCE_CODE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, City entity) {
        stmt.clearBindings();
 
        String COUNTY_CODE = entity.getCOUNTY_CODE();
        if (COUNTY_CODE != null) {
            stmt.bindString(1, COUNTY_CODE);
        }
 
        String CITY_CODE = entity.getCITY_CODE();
        if (CITY_CODE != null) {
            stmt.bindString(2, CITY_CODE);
        }
 
        String COUNTY_NAME = entity.getCOUNTY_NAME();
        if (COUNTY_NAME != null) {
            stmt.bindString(3, COUNTY_NAME);
        }
 
        String CITY_NAME = entity.getCITY_NAME();
        if (CITY_NAME != null) {
            stmt.bindString(4, CITY_NAME);
        }
 
        String PROVINCE_NAME = entity.getPROVINCE_NAME();
        if (PROVINCE_NAME != null) {
            stmt.bindString(5, PROVINCE_NAME);
        }
 
        String PROVINCE_CODE = entity.getPROVINCE_CODE();
        if (PROVINCE_CODE != null) {
            stmt.bindString(6, PROVINCE_CODE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
 
        String COUNTY_CODE = entity.getCOUNTY_CODE();
        if (COUNTY_CODE != null) {
            stmt.bindString(1, COUNTY_CODE);
        }
 
        String CITY_CODE = entity.getCITY_CODE();
        if (CITY_CODE != null) {
            stmt.bindString(2, CITY_CODE);
        }
 
        String COUNTY_NAME = entity.getCOUNTY_NAME();
        if (COUNTY_NAME != null) {
            stmt.bindString(3, COUNTY_NAME);
        }
 
        String CITY_NAME = entity.getCITY_NAME();
        if (CITY_NAME != null) {
            stmt.bindString(4, CITY_NAME);
        }
 
        String PROVINCE_NAME = entity.getPROVINCE_NAME();
        if (PROVINCE_NAME != null) {
            stmt.bindString(5, PROVINCE_NAME);
        }
 
        String PROVINCE_CODE = entity.getPROVINCE_CODE();
        if (PROVINCE_CODE != null) {
            stmt.bindString(6, PROVINCE_CODE);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // COUNTY_CODE
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CITY_CODE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // COUNTY_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CITY_NAME
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PROVINCE_NAME
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // PROVINCE_CODE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setCOUNTY_CODE(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCITY_CODE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCOUNTY_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCITY_NAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPROVINCE_NAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPROVINCE_CODE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(City entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(City entity) {
        return null;
    }

    @Override
    public boolean hasKey(City entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
